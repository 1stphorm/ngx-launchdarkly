{"version":3,"file":"ngx-launchdarkly.umd.js.map","sources":["ng://ngx-launchdarkly/lib/ngx-launchdarkly.service.ts","ng://ngx-launchdarkly/lib/ngx-launchdarkly.directive.ts","ng://ngx-launchdarkly/lib/ngx-launchdarkly.module.ts"],"sourcesContent":["import { Injectable, Inject, Optional } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { LDClient, LDFlagSet, LDOptions } from 'launchdarkly-js-client-sdk';\n\nexport const LAUNCH_DARKLY_INITIALIZER = 'LAUNCH_DARKLY_INITIALIZER';\nexport const LAUNCH_DARKLY_API_KEY = 'LAUNCH_DARKLY_API_KEY';\nexport const LAUNCH_DARKLY_OPTIONS = 'LAUNCH_DARKLY_OPTIONS';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LaunchDarklyService {\n  private _ldClient: LDClient;\n  private _flags: LDFlagSet;\n\n  readonly flagChange: Subject<any> = new Subject<any>();\n\n  private _setFlags(flags: any) {\n    this._flags = flags;\n    this.flagChange.next(this._flags);\n  }\n\n  constructor(\n    @Inject(LAUNCH_DARKLY_INITIALIZER) ldInitializer: Function,\n    @Inject(LAUNCH_DARKLY_API_KEY) ldClientApiKey: string,\n    @Optional() @Inject(LAUNCH_DARKLY_OPTIONS) ldOptions: LDOptions | undefined\n  ) {\n    this._flags = {};\n    this._ldClient = ldInitializer(ldClientApiKey, {\n      key: 'anon',\n      anonymous: true\n    }, ldOptions);\n\n    this._ldClient.on('initialized', (value) => this._setFlags(value));\n\n    this._ldClient.on('change', (value) => this._setFlags(value));\n\n    this._ldClient.on('error', (error) => this.flagChange.error(error));\n  }\n\n  changeUser(user: string) {\n    const currentUser = this._ldClient.getUser();\n\n    if (currentUser && currentUser.key !== user) {\n      if (user !== 'Anonymous') {\n        this._ldClient.identify({ key: user, name: user, anonymous: false });\n      } else {\n        this._ldClient.identify({ key: 'anon', anonymous: true });\n      }\n    }\n  }\n}\n","import {\n  Directive,\n  ViewContainerRef,\n  TemplateRef,\n  EmbeddedViewRef,\n  Input,\n  OnDestroy\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { LaunchDarklyService } from './ngx-launchdarkly.service';\n\nexport class NgxLaunchDarklyContext {\n  public $implicit: any = null;\n  public ngxLanchDarkly: any = null;\n}\n\n@Directive({\n  selector: '[ngxLaunchDarkly]'\n})\nexport class NgxLaunchDarklyDirective implements OnDestroy {\n  private _context: NgxLaunchDarklyContext = new NgxLaunchDarklyContext();\n  private _thenTemplateRef: TemplateRef<NgxLaunchDarklyContext> | null = null;\n  private _thenViewRef: EmbeddedViewRef<NgxLaunchDarklyContext> | null = null;\n\n  private _currentFlag: string | undefined;\n  private _flagSubscription: Subscription = Subscription.EMPTY;\n\n  constructor(\n    private _viewContainer: ViewContainerRef,\n    private _ldService: LaunchDarklyService,\n    templateRef: TemplateRef<NgxLaunchDarklyContext>\n  ) {\n    this._thenTemplateRef = templateRef;\n  }\n\n  @Input()\n  set ngxLaunchDarkly(flagName: string) {\n    if (this._currentFlag == null && flagName) {\n      this._currentFlag = flagName;\n      this._startSubscription();\n    } else {\n      throw new Error('flagName parameter should be bound once');\n    }\n  }\n\n  private _updateView() {\n    if (this._context.$implicit) {\n      if (!this._thenViewRef) {\n        this._viewContainer.clear();\n        if (this._thenTemplateRef) {\n          this._thenViewRef =\n            this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n        }\n      }\n    } else {\n      this._viewContainer.clear();\n      this._thenViewRef = null;\n    }\n  }\n\n  private _startSubscription() {\n    this._flagSubscription = this._ldService.flagChange\n      .pipe(map(flags => !!flags[this._currentFlag]))\n      .subscribe((flagState: boolean) => {\n        this._context.$implicit = this._context.ngxLanchDarkly = flagState;\n        this._updateView();\n      });\n  }\n\n  ngOnDestroy() {\n    this._flagSubscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxLaunchDarklyDirective } from './ngx-launchdarkly.directive';\nimport { LAUNCH_DARKLY_INITIALIZER } from './ngx-launchdarkly.service';\nimport { initialize } from 'launchdarkly-js-client-sdk';\n\n@NgModule({\n  declarations: [NgxLaunchDarklyDirective],\n  imports: [\n  ],\n  providers: [\n    { provide: LAUNCH_DARKLY_INITIALIZER, useValue: initialize }\n  ],\n  exports: [NgxLaunchDarklyDirective]\n})\nexport class NgxLaunchDarklyModule { }\n"],"names":["Subject","Injectable","Inject","Optional","Subscription","map","Directive","ViewContainerRef","TemplateRef","Input","initialize","NgModule"],"mappings":"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"}
