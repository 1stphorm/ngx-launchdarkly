{"version":3,"sources":["ng://ngx-launchdarkly/lib/ngx-launchdarkly.service.ts","ng://ngx-launchdarkly/lib/ngx-launchdarkly.directive.ts","ng://ngx-launchdarkly/lib/ngx-launchdarkly.module.ts"],"names":["LAUNCH_DARKLY_INITIALIZER","LAUNCH_DARKLY_API_KEY","LAUNCH_DARKLY_OPTIONS","LaunchDarklyService","prototype","_setFlags","flags","this","_flags","flagChange","next","changeUser","user","currentUser","_ldClient","getUser","key","identify","name","anonymous","Injectable","args","providedIn","Function","decorators","type","Inject","Optional","ldInitializer","ldClientApiKey","ldOptions","_this","Subject","on","value","error","NgxLaunchDarklyContext","$implicit","ngxLanchDarkly","Object","defineProperty","NgxLaunchDarklyDirective","flagName","_currentFlag","Error","_startSubscription","_updateView","_context","_thenViewRef","_viewContainer","clear","_thenTemplateRef","createEmbeddedView","_flagSubscription","_ldService","pipe","map","subscribe","flagState","ngOnDestroy","unsubscribe","Directive","selector","ViewContainerRef","TemplateRef","Input","templateRef","Subscription","EMPTY","Éµ0","initialize","NgxLaunchdarklyModule","NgModule","declarations","imports","providers","provide","useValue","exports"],"mappings":"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","sourcesContent":["import { Injectable, Inject, Optional } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { LDClient, LDFlagSet, LDOptions } from 'launchdarkly-js-client-sdk';\n\nexport const LAUNCH_DARKLY_INITIALIZER = 'LAUNCH_DARKLY_INITIALIZER';\nexport const LAUNCH_DARKLY_API_KEY = 'LAUNCH_DARKLY_API_KEY';\nexport const LAUNCH_DARKLY_OPTIONS = 'LAUNCH_DARKLY_OPTIONS';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LaunchDarklyService {\n  private _ldClient: LDClient;\n  private _flags: LDFlagSet;\n\n  readonly flagChange: Subject<any> = new Subject<any>();\n\n  private _setFlags(flags: any) {\n    this._flags = flags;\n    this.flagChange.next(this._flags);\n  }\n\n  constructor(\n    @Inject(LAUNCH_DARKLY_INITIALIZER) ldInitializer: Function,\n    @Inject(LAUNCH_DARKLY_API_KEY) ldClientApiKey: string,\n    @Optional() @Inject(LAUNCH_DARKLY_OPTIONS) ldOptions: LDOptions | undefined\n  ) {\n    this._flags = {};\n    this._ldClient = ldInitializer(ldClientApiKey, {\n      key: 'anon',\n      anonymous: true\n    }, ldOptions);\n\n    this._ldClient.on('initialized', (value) => this._setFlags(value));\n\n    this._ldClient.on('change', (value) => this._setFlags(value));\n\n    this._ldClient.on('error', (error) => this.flagChange.error(error));\n  }\n\n  changeUser(user: string) {\n    const currentUser = this._ldClient.getUser();\n\n    if (currentUser && currentUser.key !== user) {\n      if (user !== 'Anonymous') {\n        this._ldClient.identify({ key: user, name: user, anonymous: false });\n      } else {\n        this._ldClient.identify({ key: 'anon', anonymous: true });\n      }\n    }\n  }\n}\n","import {\n  Directive,\n  ViewContainerRef,\n  TemplateRef,\n  EmbeddedViewRef,\n  Input,\n  OnDestroy\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { LaunchDarklyService } from './ngx-launchdarkly.service';\n\nexport class NgxLaunchDarklyContext {\n  public $implicit: any = null;\n  public ngxLanchDarkly: any = null;\n}\n\n@Directive({\n  selector: '[ngxLaunchDarkly]'\n})\nexport class NgxLaunchDarklyDirective implements OnDestroy {\n  private _context: NgxLaunchDarklyContext = new NgxLaunchDarklyContext();\n  private _thenTemplateRef: TemplateRef<NgxLaunchDarklyContext> | null = null;\n  private _thenViewRef: EmbeddedViewRef<NgxLaunchDarklyContext> | null = null;\n\n  private _currentFlag: string | undefined;\n  private _flagSubscription: Subscription = Subscription.EMPTY;\n\n  constructor(\n    private _viewContainer: ViewContainerRef,\n    private _ldService: LaunchDarklyService,\n    templateRef: TemplateRef<NgxLaunchDarklyContext>\n  ) {\n    this._thenTemplateRef = templateRef;\n  }\n\n  @Input()\n  set ngxLaunchDarkly(flagName: string) {\n    if (this._currentFlag == null && flagName) {\n      this._currentFlag = flagName;\n      this._startSubscription();\n    } else {\n      throw new Error('flagName parameter should be bound once');\n    }\n  }\n\n  private _updateView() {\n    if (this._context.$implicit) {\n      if (!this._thenViewRef) {\n        this._viewContainer.clear();\n        if (this._thenTemplateRef) {\n          this._thenViewRef =\n            this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n        }\n      }\n    } else {\n      this._viewContainer.clear();\n      this._thenViewRef = null;\n    }\n  }\n\n  private _startSubscription() {\n    this._flagSubscription = this._ldService.flagChange\n      .pipe(map(flags => !!flags[this._currentFlag]))\n      .subscribe((flagState: boolean) => {\n        this._context.$implicit = this._context.ngxLanchDarkly = flagState;\n        this._updateView();\n      });\n  }\n\n  ngOnDestroy() {\n    this._flagSubscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxLaunchDarklyDirective } from './ngx-launchdarkly.directive';\nimport { LAUNCH_DARKLY_INITIALIZER } from './ngx-launchdarkly.service';\nimport { initialize } from 'launchdarkly-js-client-sdk';\n\n@NgModule({\n  declarations: [NgxLaunchDarklyDirective],\n  imports: [\n  ],\n  providers: [\n    { provide: LAUNCH_DARKLY_INITIALIZER, useValue: initialize }\n  ],\n  exports: [NgxLaunchDarklyDirective]\n})\nexport class NgxLaunchdarklyModule { }\n"]}