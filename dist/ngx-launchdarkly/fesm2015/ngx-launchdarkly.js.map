{"version":3,"file":"ngx-launchdarkly.js.map","sources":["ng://ngx-launchdarkly/lib/ngx-launchdarkly.service.ts","ng://ngx-launchdarkly/lib/ngx-launchdarkly.directive.ts","ng://ngx-launchdarkly/lib/ngx-launchdarkly.module.ts"],"sourcesContent":["import { Injectable, Inject, Optional } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { LDClient, LDFlagSet, LDOptions } from 'launchdarkly-js-client-sdk';\n\nexport const LAUNCH_DARKLY_INITIALIZER = 'LAUNCH_DARKLY_INITIALIZER';\nexport const LAUNCH_DARKLY_API_KEY = 'LAUNCH_DARKLY_API_KEY';\nexport const LAUNCH_DARKLY_OPTIONS = 'LAUNCH_DARKLY_OPTIONS';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LaunchDarklyService {\n  private _ldClient: LDClient;\n  private _flags: LDFlagSet;\n\n  readonly flagChange: Subject<any> = new Subject<any>();\n\n  private _setFlags(flags: any) {\n    this._flags = flags;\n    this.flagChange.next(this._flags);\n  }\n\n  constructor(\n    @Inject(LAUNCH_DARKLY_INITIALIZER) ldInitializer: Function,\n    @Inject(LAUNCH_DARKLY_API_KEY) ldClientApiKey: string,\n    @Optional() @Inject(LAUNCH_DARKLY_OPTIONS) ldOptions: LDOptions | undefined\n  ) {\n    this._flags = {};\n    this._ldClient = ldInitializer(ldClientApiKey, {\n      key: 'anon',\n      anonymous: true\n    }, ldOptions);\n\n    this._ldClient.on('initialized', (value) => this._setFlags(value));\n\n    this._ldClient.on('change', (value) => this._setFlags(value));\n\n    this._ldClient.on('error', (error) => this.flagChange.error(error));\n  }\n\n  changeUser(user: string) {\n    const currentUser = this._ldClient.getUser();\n\n    if (currentUser && currentUser.key !== user) {\n      if (user !== 'Anonymous') {\n        this._ldClient.identify({ key: user, name: user, anonymous: false });\n      } else {\n        this._ldClient.identify({ key: 'anon', anonymous: true });\n      }\n    }\n  }\n}\n","import {\n  Directive,\n  ViewContainerRef,\n  TemplateRef,\n  EmbeddedViewRef,\n  Input,\n  OnDestroy\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { LaunchDarklyService } from './ngx-launchdarkly.service';\n\nexport class NgxLaunchDarklyContext {\n  public $implicit: any = null;\n  public ngxLanchDarkly: any = null;\n}\n\n@Directive({\n  selector: '[ngxLaunchDarkly]'\n})\nexport class NgxLaunchDarklyDirective implements OnDestroy {\n  private _context: NgxLaunchDarklyContext = new NgxLaunchDarklyContext();\n  private _thenTemplateRef: TemplateRef<NgxLaunchDarklyContext> | null = null;\n  private _thenViewRef: EmbeddedViewRef<NgxLaunchDarklyContext> | null = null;\n\n  private _currentFlag: string | undefined;\n  private _flagSubscription: Subscription = Subscription.EMPTY;\n\n  constructor(\n    private _viewContainer: ViewContainerRef,\n    private _ldService: LaunchDarklyService,\n    templateRef: TemplateRef<NgxLaunchDarklyContext>\n  ) {\n    this._thenTemplateRef = templateRef;\n  }\n\n  @Input()\n  set ngxLaunchDarkly(flagName: string) {\n    if (this._currentFlag == null && flagName) {\n      this._currentFlag = flagName;\n      this._startSubscription();\n    } else {\n      throw new Error('flagName parameter should be bound once');\n    }\n  }\n\n  private _updateView() {\n    if (this._context.$implicit) {\n      if (!this._thenViewRef) {\n        this._viewContainer.clear();\n        if (this._thenTemplateRef) {\n          this._thenViewRef =\n            this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);\n        }\n      }\n    } else {\n      this._viewContainer.clear();\n      this._thenViewRef = null;\n    }\n  }\n\n  private _startSubscription() {\n    this._flagSubscription = this._ldService.flagChange\n      .pipe(map(flags => !!flags[this._currentFlag]))\n      .subscribe((flagState: boolean) => {\n        this._context.$implicit = this._context.ngxLanchDarkly = flagState;\n        this._updateView();\n      });\n  }\n\n  ngOnDestroy() {\n    this._flagSubscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxLaunchDarklyDirective } from './ngx-launchdarkly.directive';\nimport { LAUNCH_DARKLY_INITIALIZER } from './ngx-launchdarkly.service';\nimport { initialize } from 'launchdarkly-js-client-sdk';\n\n@NgModule({\n  declarations: [NgxLaunchDarklyDirective],\n  imports: [\n  ],\n  providers: [\n    { provide: LAUNCH_DARKLY_INITIALIZER, useValue: initialize }\n  ],\n  exports: [NgxLaunchDarklyDirective]\n})\nexport class NgxLaunchDarklyModule { }\n"],"names":[],"mappings":"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"}
